<h1>New Order</h1>

<%= form_with model: @order, url: orders_path, local: true do |f| %>
  <!-- Customer Details -->
  <fieldset>
    <legend>Customer Details</legend>
    <div>
      <%= f.label :customer_name, "Customer Name" %>
      <%= f.text_field :customer_name, required: true %>
    </div>

    <div>
      <%= f.label :mobile_number, "Mobile Number" %>
      <%= f.telephone_field :mobile_number, required: true %>
    </div>
  </fieldset>

  <!-- Pizza Selection -->
  <fieldset>
    <legend>Pizza Selection</legend>
    <div id="pizza-container"></div>
    <button type="button" id="add_pizza">Add Pizza</button>

    <!-- Hidden template for adding pizza fields dynamically -->
    <template id="pizza-template">
      <div class="nested-fields">
        <div class="form-group">
          <label>Select Pizza</label>
          <%= f.collection_select :pizza_id, @pizzas, :id, :formatted_name_price, { prompt: "Choose Your Pizza and Size" }, class: 'pizza-select' %>
        </div>

        <div class="form-group">
          <label>Select Crust</label>
          <%= f.collection_select :crust_id, @crusts, :id, :formatted_crust_price, 
            { prompt: "Choose Your Crust" }, 
            { class: 'crust-select', data: { prices: @crusts.map { |c| [c.id, c.price] }.to_h.to_json } } 
          %>
        </div>

        <div class="form-group">
          <label>Quantity</label>
          <input type="number" name="order[order_items][][quantity]" min="1" value="1">
        </div>

        <div class="form-group">
          <label>Toppings</label>
          <% @toppings.each do |topping| %>
            <div>
              <input type="checkbox" name="order[order_items][][topping_ids][]" value="<%= topping.id %>" data-price="<%= topping.price %>">
              <%= label_tag "order_topping_ids_#{topping.id}", "#{topping.name} (₹#{topping.price})" %>
            </div>
          <% end %>
        </div>

        <a href="#" class="remove-fields">Remove</a>
      </div>
    </template>
  </fieldset>

  <!-- Sides Selection -->
  <div>
    <label for="sides">Select Sides:</label>
    <% @sides.each do |side| %>
      <div>
        <%= check_box_tag "order[side_ids][]", side.id, false, class: 'side-checkbox', data: { price: side.price } %>
        <%= label_tag "order_side_ids_#{side.id}", "#{side.name} (₹#{side.price})" %>
      </div>
    <% end %>
  </div>
  <br />

  <!-- Order Summary -->
  <fieldset>
    <legend>Order Summary</legend>
    <div>
      <%= f.label :total_amount, "Total Amount" %>
      <%= f.text_field :total_amount, id: "total-amount", readonly: true, value: "0.0" %>
    </div>
  </fieldset>

  <div>
    <%= f.submit "Place Order" %>
  </div>
<% end %>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const pizzaContainer = document.getElementById('pizza-container');
    const pizzaTemplate = document.getElementById('pizza-template');
    let pizzaCounter = 0;

    document.getElementById('add_pizza').addEventListener('click', () => {
      if (!pizzaTemplate) {
        alert('Pizza fields template not found!');
        return;
      }

      pizzaCounter++;
      const newPizzaFields = pizzaTemplate.content.cloneNode(true);

      // Ensure strong parameter naming for nested attributes
      newPizzaFields.querySelectorAll('input, select').forEach(field => {
        if (field.name) {
          if (field.name.includes('order_items')) {
            field.name = field.name.replace(/\[\]/, `[${pizzaCounter}]`);
          }
          if (field.classList.contains('pizza-select')) {
            field.name = `order[order_items][${pizzaCounter}][pizza_id]`;
          }
          if (field.classList.contains('crust-select')) {
            field.name = `order[order_items][${pizzaCounter}][crust_id]`;
          }
        }
      });

      pizzaContainer.appendChild(newPizzaFields);
    });

    // Remove Pizza Handler
    pizzaContainer.addEventListener('click', event => {
      if (event.target.classList.contains('remove-fields')) {
        event.preventDefault();
        event.target.closest('.nested-fields').remove();
        calculateTotal();
      }
    });

    // Price Calculation Logic
    const calculateTotal = () => {
      let total = 0;

      document.querySelectorAll('.nested-fields').forEach(block => {
        const pizzaPrice = parseFloat(block.querySelector('.pizza-select')?.selectedOptions[0]?.dataset.price || 0);
        const crustPrice = parseFloat(block.querySelector('.crust-select')?.selectedOptions[0]?.dataset.price || 0);
        const toppingsPrice = Array.from(block.querySelectorAll('[name*="[topping_ids][]"]:checked'))
          .reduce((sum, topping) => sum + parseFloat(topping.dataset.price || 0), 0);
        const quantity = parseInt(block.querySelector('[name*="[quantity]"]')?.value || 1);

        total += (pizzaPrice + crustPrice + toppingsPrice) * quantity;
      });

      // Calculate side prices
      document.querySelectorAll('.side-checkbox:checked').forEach(side => {
        const sidePrice = parseFloat(side.dataset.price || 0);
        const sideQuantity = parseInt(side.closest('div').querySelector('.side-quantity')?.value || 1);
        total += sidePrice * sideQuantity;
      });

      document.getElementById('total-amount').value = total.toFixed(2);
    };

    document.addEventListener('change', calculateTotal);
  });
</script>
